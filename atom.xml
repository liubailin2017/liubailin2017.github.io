<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Liubailin&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="liubailin2017@github.io/"/>
  <updated>2018-12-16T05:57:54.983Z</updated>
  <id>liubailin2017@github.io/</id>
  
  <author>
    <name>Penguin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello Http</title>
    <link href="liubailin2017@github.io/2018/12/16/helloHttp/"/>
    <id>liubailin2017@github.io/2018/12/16/helloHttp/</id>
    <published>2018-12-16T05:57:54.983Z</published>
    <updated>2018-12-16T05:57:54.983Z</updated>
    
    <content type="html"><![CDATA[<h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>​    同样开始还是来一段引言,来说明我为什么写这篇文章与这篇文章主要是讲的什么,好, 废话不多说,下面开始正文.</p><p>​    首先,网上关于http的文章一抓一大把,虽然是讲得很详细,但是读完,我也只是知道了个大概,不知道一个http请求怎么发送,与怎么响应.也就是读完大多文章只是感性的对http.所以我用这篇文章来讲解用java的Sokcet来发送一个http请求,和得到对应的响应,不对http做完整的讲解.</p><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><p>​    建议读者移步<a href="https://github.com/hadyang/interview/blob/master/basic/net/http.md" target="_blank" rel="noopener">到此</a>了解http的详细,下面的内容默认读都已经阅读了上个链接的文章.</p><h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><h5 id="用java的Socket发送一个http请求"><a href="#用java的Socket发送一个http请求" class="headerlink" title="用java的Socket发送一个http请求"></a>用java的Socket发送一个http请求</h5><p><a href="https://github.com/liubailin2017/Hello_Java/tree/master/http" target="_blank" rel="noopener">代码详细</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/page2/request.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>上面程序等同在浏览器中输入 <a href="http://www.hqhworld.cn/img/eventimg/PwYvKIKMuK6g.jpg.jpg" target="_blank" rel="noopener">http://www.hqhworld.cn/img/eventimg/PwYvKIKMuK6g.jpg.jpg</a></p><p>​    <a href="http://www.hqhworld.cn" target="_blank" rel="noopener">www.hqhworld.cn</a> 是我一个云服务器,随时都有可能停,如果读者要自己试试,失败的话可以用其它网站.最好不要是https的. https笔者没有太多了解过.</p><p>上面代码只发送了请求头,没有加请求参数. </p><h5 id="接收响应"><a href="#接收响应" class="headerlink" title="接收响应"></a>接收响应</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/page2/response.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>我们把接收到的内容写进 /home/liubailin/ttttttt.data 文件中.</p><h5 id="查看响应内容"><a href="#查看响应内容" class="headerlink" title="查看响应内容"></a>查看响应内容</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/page2/data.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这是我接收到的内容(/home/liubailin/tttttttt.data),下面乱码主要是接到的是一张图片,如果去掉上面的响应头就是一张png图片了.</p><p>上面代码只发送了请求头,下面我们加入请求参数. 我们只讲解get 和post请求方式. </p><h5 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h5><p>我们把上面代码的url改为如下代码</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/page2/get.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>Get就是把请求参数放在url中. </p><h5 id="Post"><a href="#Post" class="headerlink" title="Post"></a>Post</h5><p>为了简单我们用的方式(这要看web服务器中要获取的是什么格式的)</p><p>下面给出一个登录的表单.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">String authorize = <span class="string">"stu_nmb=163796&amp;passwd=liubailin12&amp;tmp=0000a"</span>;</span><br><span class="line">os.write((<span class="string">"POST /asport/login.do? HTTP/1.1\r\n"</span> + </span><br><span class="line"><span class="string">"Host: www.hqhworld.cn:8080\r\n"</span> + </span><br><span class="line"><span class="string">"Content-Type: application/x-www-form-urlencoded\r\n"</span>+</span><br><span class="line"><span class="string">"Accept-Language: zh-cn,zh;q=0.5\r\n"</span> + </span><br><span class="line"><span class="string">"Accept-Encoding: gzip, deflate\r\n"</span> + </span><br><span class="line"><span class="string">"Accept-Charset: GB2312,utf-8;q=0.7,*;q=0.7\r\n"</span> + </span><br><span class="line"><span class="comment">//"Cache-Control: no-cache\r\nPostman-Token: e00dbaf5-15e8-3667-6fc5-48ee3cc89758\r\n" +</span></span><br><span class="line"><span class="comment">//+ "Cookie:"+</span></span><br><span class="line"><span class="string">"Content-Length: "</span>+authorize.length()+<span class="string">"\r\n"</span>+</span><br><span class="line"><span class="string">"\r\n"</span>+</span><br><span class="line">authorize+</span><br><span class="line"><span class="string">"\r\n"</span>).getBytes(<span class="string">"UTF-8"</span>));</span><br><span class="line">os.flush();</span><br></pre></td></tr></table></figure><p>“Content-Type: application/x-www-form-urlencoded\r\n” // 这个主要指定post请求中包含的内容类型,另外还有</p><p>Content-Type: multipart/form-data;</p><p>Content-Type: application/json</p><p>其实就是你的这个post请求数据的格式,然后服务器就按这样的格式读取数据.</p><p>如果要知道详细,请参见其它地方.</p><p>这里我们使用最简单的Content-Type: application/x-www-form-urlencoded(这要看服务接收的类型,所以选了个接收这样表单的web服务器.)</p><hr><p>NOTE :</p><p>其实Content-Type: application/x-www-form-urlencoded类型和get的数据形势是一样的, 只是get是把数据放在url中,而post是放在请求体中.面放在请求做中是没有大小限制的.</p><p>其实, get也可以传文件, 只是有大小限制,如果你把一个文件转成base64码,放在url中, 所以其实在设计web服务器时是很奶灵活的,采取不同设计不可以迷惑一些爬虫程序.</p><p>上面是个人看法.</p><hr><p>“Content-Length: “+authorize.length()+”\r\n” //这个一定要写, 因为你不写服务器就不知道你传过去了多少数据,服务器就接收到不参数.</p><p>这里可以看到登录成功是服务器返回的数据:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/page2/resJosn.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h4&gt;&lt;p&gt;​    同样开始还是来一段引言,来说明我为什么写这篇文章与这篇文章主要是讲的什么,好, 废话不多说,下面开始正文.&lt;/p&gt;
&lt;p&gt;​   
      
    
    </summary>
    
      <category term="http" scheme="liubailin2017@github.io/categories/http/"/>
    
    
      <category term="java" scheme="liubailin2017@github.io/tags/java/"/>
    
      <category term="Http" scheme="liubailin2017@github.io/tags/Http/"/>
    
  </entry>
  
  <entry>
    <title>交换两数 C</title>
    <link href="liubailin2017@github.io/2018/11/26/HelloC/"/>
    <id>liubailin2017@github.io/2018/11/26/HelloC/</id>
    <published>2018-11-26T12:26:15.104Z</published>
    <updated>2018-11-26T12:26:15.104Z</updated>
    
    <content type="html"><![CDATA[<h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>​    今天在 <a href="https://pintia.cn/problem-sets/14/problems/813" target="_blank" rel="noopener">PTA</a>上练习c语言时,发现有一有意思的算法</p><p>​    先上代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fact</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>( a &lt; b) &#123; </span><br><span class="line">a = a ^ b;</span><br><span class="line">b = a ^ b;</span><br><span class="line">a = a ^ b; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">while</span>( c = a % b) &#123;</span><br><span class="line">a  = b ;</span><br><span class="line">b = c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a1,b1, a2,b2;</span><br><span class="line"><span class="keyword">int</span> ra,rb;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d/%d %d/%d"</span>,&amp;a1,&amp;b1,&amp;a2,&amp;b2);</span><br><span class="line">rb = b1*b2;</span><br><span class="line">ra = a1*b2+ a2*b1;</span><br><span class="line"><span class="keyword">int</span> f = fact(rb,ra);</span><br><span class="line"><span class="comment">//除以最大公因数</span></span><br><span class="line">rb /= f;</span><br><span class="line">ra /= f;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,ra);</span><br><span class="line"><span class="keyword">if</span>(rb != <span class="number">1</span>) </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"/%d"</span>,rb);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现这段代码没有</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = a ^ b;</span><br><span class="line">b = a ^ b;</span><br><span class="line">a = a ^ b;</span><br></pre></td></tr></table></figure><p>这是交换两数的代码.是不是很神奇,后来我又在网上找了更多的交换两数的代码.</p><p>除去常用的 用个中间变量的方法以外,还可以用加减,不过可以产生溢出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = a + b;</span><br><span class="line">b = a - b;</span><br><span class="line">a = a - b;</span><br></pre></td></tr></table></figure><p>当然也可以用乘除了,但是乘除就太容易溢出了,所以就不写出来了. : -)</p><p> 发现,这么简单的一件是还有这么多方法,还挺有意思的,不过说回来,用异或应该是最完美的吧.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h4&gt;&lt;p&gt;​    今天在 &lt;a href=&quot;https://pintia.cn/problem-sets/14/problems/813&quot; targ
      
    
    </summary>
    
      <category term="C" scheme="liubailin2017@github.io/categories/C/"/>
    
    
      <category term="C" scheme="liubailin2017@github.io/tags/C/"/>
    
      <category term="随笔" scheme="liubailin2017@github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>hey ! 多态</title>
    <link href="liubailin2017@github.io/2018/11/20/1/"/>
    <id>liubailin2017@github.io/2018/11/20/1/</id>
    <published>2018-11-20T06:48:22.430Z</published>
    <updated>2018-11-20T06:48:21.986Z</updated>
    
    <content type="html"><![CDATA[<h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>学习了几年的 JAVA 听到多态,知道是怎么回事却说不出个所以然来,今天就来说说多态.</p><p> 对于多态这个名字,各个地方解释又各有差别,很难理解这多态到底是个什么鬼!</p><p>其实多态简单的理解就是<u>对象的多种形态</u>,比如:你可以把Garfield(加菲猫)看作一个Cat(猫)也可以看作一个Animal(动物)</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/page1/img1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>    <p>多态的实现是依赖于了继承,再此我们就来说一说什么继承.</p><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>如上图所示的继承关系我们可以编写代码</p><p>Animal.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"eat"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Cat.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeNoiser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"喵 喵 喵 ~~~"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Garfield.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Garfield</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">winterSleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"加菲猫睡觉了,明天春天见."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"加菲猫只吃匹萨和千层面"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>​    在最后Garfield类里是有 eat() winterSleep() makeNoiser()行为(方法)的,这便是继承,继承不仅可以继承方法,还可以继承属性(即类里的成员变量),这里就不举例了,需要注意的是不是父类所有的东西都会被继承,只有被标记为public的会被继承,当然被标记为protected也可能被继承,具体的继承规则就请读者参考其它地方,这里我们只重点讲解什么是多态.</p><p>最后编写驱动<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Driver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">act</span><span class="params">(Animal animal)</span> </span>&#123;</span><br><span class="line">animal.eat();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</span><br><span class="line">Garfield grfield = <span class="keyword">new</span> Garfield();</span><br><span class="line">act(grfield);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/page1/img2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>​    这里加菲猫被当成了一个Animal 给了act(Animal animal) 还有是act(Animal animal) 接收到的是一个加菲猫对象,所以他表现出了加菲猫的行为,这个就是多态(加菲猫看做是了animal).</p><p>​    最后需要注意的一点是act(Animal animal) 中的animal是一个引用,引用就好比一个遥控器,他需要指向(遥控)一个对像,而我们new Garfield() 得到到就是一个对象.</p><p>然后笔者有一个问题假设代码是这样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Driver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">act</span><span class="params">(Animal animal)</span> </span>&#123;</span><br><span class="line">animal.eat();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">act</span><span class="params">(Cat animal)</span> </span>&#123;</span><br><span class="line">animal.makeNoiser();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</span><br><span class="line">Garfield grfield = <span class="keyword">new</span> Garfield();</span><br><span class="line">act(grfield);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>java编译器会把我们的garfield 当成 Cat 呢 还是Animal呢<br>输出结果:<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/page1/img2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>具体原因我也不知道,还请知道的同学告诉我一下.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h4&gt;&lt;p&gt;学习了几年的 JAVA 听到多态,知道是怎么回事却说不出个所以然来,今天就来说说多态.&lt;/p&gt;
&lt;p&gt; 对于多态这个名字,各个地方解释又各有
      
    
    </summary>
    
      <category term="java" scheme="liubailin2017@github.io/categories/java/"/>
    
    
      <category term="java" scheme="liubailin2017@github.io/tags/java/"/>
    
      <category term="Hello" scheme="liubailin2017@github.io/tags/Hello/"/>
    
      <category term="编程语言" scheme="liubailin2017@github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="liubailin2017@github.io/2018/11/18/hello-world/"/>
    <id>liubailin2017@github.io/2018/11/18/hello-world/</id>
    <published>2018-11-18T13:50:53.590Z</published>
    <updated>2018-11-18T13:50:53.554Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="frist" scheme="liubailin2017@github.io/categories/frist/"/>
    
    
      <category term="随笔" scheme="liubailin2017@github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="frist" scheme="liubailin2017@github.io/tags/frist/"/>
    
  </entry>
  
  <entry>
    <title>return</title>
    <link href="liubailin2017@github.io/2018/11/18/return/"/>
    <id>liubailin2017@github.io/2018/11/18/return/</id>
    <published>2018-11-18T06:17:55.000Z</published>
    <updated>2018-11-20T06:45:08.632Z</updated>
    
    <content type="html"><![CDATA[<h2 id="回来"><a href="#回来" class="headerlink" title="回来"></a>回来</h2><pre><code>现在回来开始写博客.</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;回来&quot;&gt;&lt;a href=&quot;#回来&quot; class=&quot;headerlink&quot; title=&quot;回来&quot;&gt;&lt;/a&gt;回来&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;现在回来开始写博客.
&lt;/code&gt;&lt;/pre&gt;
      
    
    </summary>
    
    
      <category term="随笔" scheme="liubailin2017@github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>校园社区 app 主页</title>
    <link href="liubailin2017@github.io/2018/06/16/my-shool-main-page/"/>
    <id>liubailin2017@github.io/2018/06/16/my-shool-main-page/</id>
    <published>2018-06-16T04:00:12.000Z</published>
    <updated>2018-11-26T12:40:23.124Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><ul><li><a href="https://github.com/liubailin2017/MyShoolResouce/blob/master/apk/myschool.apk?raw=true" target="_blank" rel="noopener">校园社区 app</a>.</li><li><a href="https://github.com/WeAreSkr/616321PAGE" target="_blank" rel="noopener">源码</a>;</li></ul><h3 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/myschool/Screenshot_20180616-112936.jpg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure>.<br>- note 暂时不提供注册功能，可使用内测帐号，或把你的信息（名字，学号，学校）发送到<a href="mailto:liubailinprivate@163.com" target="_blank" rel="noopener">liubailinprivate@163.com</a><br><br>### 登录成功<br><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/myschool/Screenshot_20180616-113004.jpg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><ul><li>查看自己可使用的各个模块</li></ul><h3 id="进入我的动态模块"><a href="#进入我的动态模块" class="headerlink" title="进入我的动态模块"></a>进入我的动态模块</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/myschool/Screenshot_20180616-113038.jpg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><ul><li>查看、删除、发表 动态。</li><li>发表了，就不能编辑了，因为别人是对你当前发表的作的评论。</li></ul><h3 id="进入同学动态模块"><a href="#进入同学动态模块" class="headerlink" title="进入同学动态模块"></a>进入同学动态模块</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/myschool/Screenshot_20180616-113148.jpg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><ul><li>查看同学动态，点击查看详细</li></ul><h3 id="评论动态"><a href="#评论动态" class="headerlink" title="评论动态"></a>评论动态</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/myschool/Screenshot_20180616-113113.jpg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><ul><li>查看评论，评论论等。</li><li>点击下面评论可以对每一个评论进行回复。<h3 id="即将加入的功能"><a href="#即将加入的功能" class="headerlink" title="即将加入的功能"></a>即将加入的功能</h3></li><li>网络抓取功能<br>  抓取一些有意思的东西，如 每日一句，每日一文等。</li><li>消息提示功能<br>  目前同学回复了消息不会自动提示，既将加入。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/liubailin2017/MyShoolResouce/blob/ma
      
    
    </summary>
    
      <category term="android" scheme="liubailin2017@github.io/categories/android/"/>
    
    
      <category term="安卓项目" scheme="liubailin2017@github.io/tags/%E5%AE%89%E5%8D%93%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="android" scheme="liubailin2017@github.io/tags/android/"/>
    
  </entry>
  
</feed>
