{"meta":{"title":"Liubailin's blog","subtitle":null,"description":null,"author":"Penguin","url":"liubailin2017@github.io"},"pages":[{"title":"分类","date":"2018-11-18T13:45:32.000Z","updated":"2018-11-18T13:55:27.317Z","comments":true,"path":"categories/index.html","permalink":"liubailin2017@github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2018-11-18T13:45:17.000Z","updated":"2018-11-18T13:55:45.201Z","comments":true,"path":"tags/index.html","permalink":"liubailin2017@github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Hello Http","slug":"helloHttp","date":"2018-12-16T05:57:54.983Z","updated":"2018-12-16T05:57:54.983Z","comments":true,"path":"2018/12/16/helloHttp/","link":"","permalink":"liubailin2017@github.io/2018/12/16/helloHttp/","excerpt":"","text":"引言​ 同样开始还是来一段引言,来说明我为什么写这篇文章与这篇文章主要是讲的什么,好, 废话不多说,下面开始正文. ​ 首先,网上关于http的文章一抓一大把,虽然是讲得很详细,但是读完,我也只是知道了个大概,不知道一个http请求怎么发送,与怎么响应.也就是读完大多文章只是感性的对http.所以我用这篇文章来讲解用java的Sokcet来发送一个http请求,和得到对应的响应,不对http做完整的讲解. 基础​ 建议读者移步到此了解http的详细,下面的内容默认读都已经阅读了上个链接的文章. 正文用java的Socket发送一个http请求代码详细 上面程序等同在浏览器中输入 http://www.hqhworld.cn/img/eventimg/PwYvKIKMuK6g.jpg.jpg ​ www.hqhworld.cn 是我一个云服务器,随时都有可能停,如果读者要自己试试,失败的话可以用其它网站.最好不要是https的. https笔者没有太多了解过. 上面代码只发送了请求头,没有加请求参数. 接收响应 我们把接收到的内容写进 /home/liubailin/ttttttt.data 文件中. 查看响应内容 这是我接收到的内容(/home/liubailin/tttttttt.data),下面乱码主要是接到的是一张图片,如果去掉上面的响应头就是一张png图片了. 上面代码只发送了请求头,下面我们加入请求参数. 我们只讲解get 和post请求方式. GET我们把上面代码的url改为如下代码 Get就是把请求参数放在url中. Post为了简单我们用的方式(这要看web服务器中要获取的是什么格式的) 下面给出一个登录的表单. 1234567891011121314String authorize = \"stu_nmb=163796&amp;passwd=liubailin12&amp;tmp=0000a\";os.write((\"POST /asport/login.do? HTTP/1.1\\r\\n\" + \"Host: www.hqhworld.cn:8080\\r\\n\" + \"Content-Type: application/x-www-form-urlencoded\\r\\n\"+ \"Accept-Language: zh-cn,zh;q=0.5\\r\\n\" + \"Accept-Encoding: gzip, deflate\\r\\n\" + \"Accept-Charset: GB2312,utf-8;q=0.7,*;q=0.7\\r\\n\" + //\"Cache-Control: no-cache\\r\\nPostman-Token: e00dbaf5-15e8-3667-6fc5-48ee3cc89758\\r\\n\" + //+ \"Cookie:\"+ \"Content-Length: \"+authorize.length()+\"\\r\\n\"+ \"\\r\\n\"+ authorize+ \"\\r\\n\").getBytes(\"UTF-8\"));os.flush(); “Content-Type: application/x-www-form-urlencoded\\r\\n” // 这个主要指定post请求中包含的内容类型,另外还有 Content-Type: multipart/form-data; Content-Type: application/json 其实就是你的这个post请求数据的格式,然后服务器就按这样的格式读取数据. 如果要知道详细,请参见其它地方. 这里我们使用最简单的Content-Type: application/x-www-form-urlencoded(这要看服务接收的类型,所以选了个接收这样表单的web服务器.) NOTE : 其实Content-Type: application/x-www-form-urlencoded类型和get的数据形势是一样的, 只是get是把数据放在url中,而post是放在请求体中.面放在请求做中是没有大小限制的. 其实, get也可以传文件, 只是有大小限制,如果你把一个文件转成base64码,放在url中, 所以其实在设计web服务器时是很奶灵活的,采取不同设计不可以迷惑一些爬虫程序. 上面是个人看法. “Content-Length: “+authorize.length()+”\\r\\n” //这个一定要写, 因为你不写服务器就不知道你传过去了多少数据,服务器就接收到不参数. 这里可以看到登录成功是服务器返回的数据:","categories":[{"name":"http","slug":"http","permalink":"liubailin2017@github.io/categories/http/"}],"tags":[{"name":"java","slug":"java","permalink":"liubailin2017@github.io/tags/java/"},{"name":"Http","slug":"Http","permalink":"liubailin2017@github.io/tags/Http/"}]},{"title":"交换两数 C","slug":"HelloC","date":"2018-11-26T12:26:15.104Z","updated":"2018-11-26T12:26:15.104Z","comments":true,"path":"2018/11/26/HelloC/","link":"","permalink":"liubailin2017@github.io/2018/11/26/HelloC/","excerpt":"","text":"引言​ 今天在 PTA上练习c语言时,发现有一有意思的算法 ​ 先上代码: 1234567891011121314151617181920212223242526272829303132333435#include&lt;stdio.h&gt;int fact(int a,int b) &#123; if( a &lt; b) &#123; a = a ^ b; b = a ^ b; a = a ^ b; &#125; int c = 0; while( c = a % b) &#123; a = b ; b = c; &#125; return b;&#125;int main()&#123; int a1,b1, a2,b2; int ra,rb; scanf(\"%d/%d %d/%d\",&amp;a1,&amp;b1,&amp;a2,&amp;b2); rb = b1*b2; ra = a1*b2+ a2*b1; int f = fact(rb,ra); //除以最大公因数 rb /= f; ra /= f; printf(\"%d\",ra); if(rb != 1) printf(\"/%d\",rb); return 0;&#125; 发现这段代码没有 123a = a ^ b;b = a ^ b;a = a ^ b; 这是交换两数的代码.是不是很神奇,后来我又在网上找了更多的交换两数的代码. 除去常用的 用个中间变量的方法以外,还可以用加减,不过可以产生溢出 123a = a + b;b = a - b;a = a - b; 当然也可以用乘除了,但是乘除就太容易溢出了,所以就不写出来了. : -) 发现,这么简单的一件是还有这么多方法,还挺有意思的,不过说回来,用异或应该是最完美的吧.","categories":[{"name":"C","slug":"C","permalink":"liubailin2017@github.io/categories/C/"}],"tags":[{"name":"C","slug":"C","permalink":"liubailin2017@github.io/tags/C/"},{"name":"随笔","slug":"随笔","permalink":"liubailin2017@github.io/tags/随笔/"}]},{"title":"hey ! 多态","slug":"1","date":"2018-11-20T06:48:22.430Z","updated":"2018-11-20T06:48:21.986Z","comments":true,"path":"2018/11/20/1/","link":"","permalink":"liubailin2017@github.io/2018/11/20/1/","excerpt":"","text":"引言学习了几年的 JAVA 听到多态,知道是怎么回事却说不出个所以然来,今天就来说说多态. 对于多态这个名字,各个地方解释又各有差别,很难理解这多态到底是个什么鬼! 其实多态简单的理解就是对象的多种形态,比如:你可以把Garfield(加菲猫)看作一个Cat(猫)也可以看作一个Animal(动物) 多态的实现是依赖于了继承,再此我们就来说一说什么继承. 继承如上图所示的继承关系我们可以编写代码 Animal.java12345public class Animal &#123; public void eat() &#123; System.out.println(\"eat\"); &#125;&#125; Cat.java12345public class Cat extends Animal &#123; public void makeNoiser() &#123; System.out.println(\"喵 喵 喵 ~~~\"); &#125;&#125; Garfield.java12345678public class Garfield extends Animal &#123; public void winterSleep() &#123; System.out.println(\"加菲猫睡觉了,明天春天见.\"); &#125; public void eat() &#123; System.out.println(\"加菲猫只吃匹萨和千层面\"); &#125;&#125; ​ 在最后Garfield类里是有 eat() winterSleep() makeNoiser()行为(方法)的,这便是继承,继承不仅可以继承方法,还可以继承属性(即类里的成员变量),这里就不举例了,需要注意的是不是父类所有的东西都会被继承,只有被标记为public的会被继承,当然被标记为protected也可能被继承,具体的继承规则就请读者参考其它地方,这里我们只重点讲解什么是多态. 最后编写驱动12345678910111213public class Driver &#123; public static void act(Animal animal) &#123; animal.eat(); &#125; public static void main(String [] args) &#123; Garfield grfield = new Garfield(); act(grfield); &#125;&#125; 输出: ​ 这里加菲猫被当成了一个Animal 给了act(Animal animal) 还有是act(Animal animal) 接收到的是一个加菲猫对象,所以他表现出了加菲猫的行为,这个就是多态(加菲猫看做是了animal). ​ 最后需要注意的一点是act(Animal animal) 中的animal是一个引用,引用就好比一个遥控器,他需要指向(遥控)一个对像,而我们new Garfield() 得到到就是一个对象. 然后笔者有一个问题假设代码是这样 123456789101112131415public class Driver &#123; public static void act(Animal animal) &#123; animal.eat(); &#125; public static void act(Cat animal) &#123; animal.makeNoiser(); &#125; public static void main(String [] args) &#123; Garfield grfield = new Garfield(); act(grfield); &#125;&#125; java编译器会把我们的garfield 当成 Cat 呢 还是Animal呢输出结果: 具体原因我也不知道,还请知道的同学告诉我一下.","categories":[{"name":"java","slug":"java","permalink":"liubailin2017@github.io/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"liubailin2017@github.io/tags/java/"},{"name":"Hello","slug":"Hello","permalink":"liubailin2017@github.io/tags/Hello/"},{"name":"编程语言","slug":"编程语言","permalink":"liubailin2017@github.io/tags/编程语言/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-11-18T13:50:53.590Z","updated":"2018-11-18T13:50:53.554Z","comments":true,"path":"2018/11/18/hello-world/","link":"","permalink":"liubailin2017@github.io/2018/11/18/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"frist","slug":"frist","permalink":"liubailin2017@github.io/categories/frist/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"liubailin2017@github.io/tags/随笔/"},{"name":"frist","slug":"frist","permalink":"liubailin2017@github.io/tags/frist/"}]},{"title":"return","slug":"return","date":"2018-11-18T06:17:55.000Z","updated":"2018-11-20T06:45:08.632Z","comments":true,"path":"2018/11/18/return/","link":"","permalink":"liubailin2017@github.io/2018/11/18/return/","excerpt":"","text":"回来现在回来开始写博客.","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"liubailin2017@github.io/tags/随笔/"}]},{"title":"校园社区 app 主页","slug":"my-shool-main-page","date":"2018-06-16T04:00:12.000Z","updated":"2018-11-26T12:40:23.124Z","comments":true,"path":"2018/06/16/my-shool-main-page/","link":"","permalink":"liubailin2017@github.io/2018/06/16/my-shool-main-page/","excerpt":"","text":"下载 校园社区 app. 源码; 开始使用 img .- note 暂时不提供注册功能，可使用内测帐号，或把你的信息（名字，学号，学校）发送到liubailinprivate@163.com### 登录成功 img 查看自己可使用的各个模块 进入我的动态模块 img 查看、删除、发表 动态。 发表了，就不能编辑了，因为别人是对你当前发表的作的评论。 进入同学动态模块 img 查看同学动态，点击查看详细 评论动态 img 查看评论，评论论等。 点击下面评论可以对每一个评论进行回复。即将加入的功能 网络抓取功能 抓取一些有意思的东西，如 每日一句，每日一文等。 消息提示功能 目前同学回复了消息不会自动提示，既将加入。","categories":[{"name":"android","slug":"android","permalink":"liubailin2017@github.io/categories/android/"}],"tags":[{"name":"安卓项目","slug":"安卓项目","permalink":"liubailin2017@github.io/tags/安卓项目/"},{"name":"android","slug":"android","permalink":"liubailin2017@github.io/tags/android/"}]}]}